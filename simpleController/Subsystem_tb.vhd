-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\simpleController\Subsystem_tb.vhd
-- Created: 2022-09-04 18:05:00
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 0.2
-- Target subsystem base rate: 0.2
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        0.2
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- Out1                          ce_out        0.2
-- Out2                          ce_out        0.2
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Subsystem_tb
-- Source Path: 
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_textio.ALL;
USE IEEE.float_pkg.ALL;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
LIBRARY STD;
USE STD.textio.ALL;
USE work.Subsystem_tb_pkg.ALL;

ENTITY Subsystem_tb IS
END Subsystem_tb;


ARCHITECTURE rtl OF Subsystem_tb IS

  -- Component Declarations
  COMPONENT Subsystem
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          In2                             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          ce_out                          :   OUT   std_logic;
          Out1                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          Out2                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Subsystem
    USE ENTITY work.Subsystem(rtl);

  -- Signals
  SIGNAL clk                              : std_logic;
  SIGNAL reset                            : std_logic;
  SIGNAL clk_enable                       : std_logic;
  SIGNAL rawData_In2                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Out2_done                        : std_logic;  -- ufix1
  SIGNAL rdEnb                            : std_logic;
  SIGNAL Out2_done_enb                    : std_logic;  -- ufix1
  SIGNAL Out1_addr                        : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Out2_lastAddr                    : std_logic;  -- ufix1
  SIGNAL resetn                           : std_logic;
  SIGNAL check2_done                      : std_logic;  -- ufix1
  SIGNAL Out1_done                        : std_logic;  -- ufix1
  SIGNAL Out1_done_enb                    : std_logic;  -- ufix1
  SIGNAL Out1_active                      : std_logic;  -- ufix1
  SIGNAL holdData_In2                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL In2_offset                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL In2_1                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL snkDone                          : std_logic;
  SIGNAL snkDonen                         : std_logic;
  SIGNAL tb_enb                           : std_logic;
  SIGNAL tb_enb_delay                     : std_logic;
  SIGNAL ce_out                           : std_logic;
  SIGNAL Out1                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Out2                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Out1_enb                         : std_logic;  -- ufix1
  SIGNAL Out1_lastAddr                    : std_logic;  -- ufix1
  SIGNAL check1_done                      : std_logic;  -- ufix1
  SIGNAL Out1_expected_1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Out1_ref                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Out1_testFailure                 : std_logic;  -- ufix1
  SIGNAL Out2_expected_1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Out2_ref                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Out2_testFailure                 : std_logic;  -- ufix1
  SIGNAL testFailure                      : std_logic;  -- ufix1

BEGIN
  u_Subsystem : Subsystem
    PORT MAP( clk => clk,
              reset => reset,
              clk_enable => clk_enable,
              In2 => In2_1,  -- single
              ce_out => ce_out,
              Out1 => Out1,  -- single
              Out2 => Out2  -- single
              );

  -- Data source for In2
  rawData_In2 <= X"3f800000";

  Out2_done_enb <= Out2_done AND rdEnb;

  
  Out2_lastAddr <= '1' WHEN Out1_addr >= to_unsigned(16#32#, 6) ELSE
      '0';

  Out2_done <= Out2_lastAddr AND resetn;

  -- Delay to allow last sim cycle to complete
  checkDone_2_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      check2_done <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF Out2_done_enb = '1' THEN
        check2_done <= Out2_done;
      END IF;
    END IF;
  END PROCESS checkDone_2_process;

  Out1_done_enb <= Out1_done AND rdEnb;

  
  Out1_active <= '1' WHEN Out1_addr /= to_unsigned(16#32#, 6) ELSE
      '0';

  -- holdData reg for In2
  stimuli_In2_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      holdData_In2 <= (OTHERS => 'X');
    ELSIF clk'event AND clk = '1' THEN
      holdData_In2 <= rawData_In2;
    END IF;
  END PROCESS stimuli_In2_process;

  stimuli_In2_1: PROCESS (rawData_In2, rdEnb)
  BEGIN
    IF rdEnb = '0' THEN
      In2_offset <= holdData_In2;
    ELSE
      In2_offset <= rawData_In2;
    END IF;
  END PROCESS stimuli_In2_1;

  In2_1 <= In2_offset AFTER 2 ns;

  snkDonen <=  NOT snkDone;

  resetn <=  NOT reset;

  tb_enb <= resetn AND snkDonen;

  -- Delay inside enable generation: register depth 1
  u_enable_delay_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tb_enb_delay <= '0';
    ELSIF clk'event AND clk = '1' THEN
      tb_enb_delay <= tb_enb;
    END IF;
  END PROCESS u_enable_delay_process;

  
  rdEnb <= tb_enb_delay WHEN snkDone = '0' ELSE
      '0';

  clk_enable <= rdEnb AFTER 2 ns;

  reset_gen: PROCESS 
  BEGIN
    reset <= '1';
    WAIT FOR 20 ns;
    WAIT UNTIL clk'event AND clk = '1';
    WAIT FOR 2 ns;
    reset <= '0';
    WAIT;
  END PROCESS reset_gen;

  clk_gen: PROCESS 
  BEGIN
    clk <= '1';
    WAIT FOR 5 ns;
    clk <= '0';
    WAIT FOR 5 ns;
    IF snkDone = '1' THEN
      clk <= '1';
      WAIT FOR 5 ns;
      clk <= '0';
      WAIT FOR 5 ns;
      WAIT;
    END IF;
  END PROCESS clk_gen;

  Out1_enb <= ce_out AND Out1_active;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 50
  c_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Out1_addr <= to_unsigned(16#00#, 6);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF Out1_enb = '1' THEN
        IF Out1_addr >= to_unsigned(16#32#, 6) THEN 
          Out1_addr <= to_unsigned(16#00#, 6);
        ELSE 
          Out1_addr <= Out1_addr + to_unsigned(16#01#, 6);
        END IF;
      END IF;
    END IF;
  END PROCESS c_4_process;


  
  Out1_lastAddr <= '1' WHEN Out1_addr >= to_unsigned(16#32#, 6) ELSE
      '0';

  Out1_done <= Out1_lastAddr AND resetn;

  -- Delay to allow last sim cycle to complete
  checkDone_1_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      check1_done <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF Out1_done_enb = '1' THEN
        check1_done <= Out1_done;
      END IF;
    END IF;
  END PROCESS checkDone_1_process;

  snkDone <= check1_done AND check2_done;

  -- Data source for Out1_expected
  Out1_expected_1 <= X"00000000";

  Out1_ref <= Out1_expected_1;

  Out1_checker: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Out1_testFailure <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF ce_out = '1' AND NOT isFloatSingleEqual(Out1, Out1_ref, 9.9999999999999995e-08) THEN
        Out1_testFailure <= '1';
        ASSERT FALSE
          REPORT "Error in Out1: Expected " & to_hex(Out1_ref) & (" Actual " & to_hex(Out1))
          SEVERITY ERROR;
      END IF;
    END IF;
  END PROCESS Out1_checker;

  -- Data source for Out2_expected
  Out2_expected_1 <= X"00000000";

  Out2_ref <= Out2_expected_1;

  Out2_checker: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Out2_testFailure <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF ce_out = '1' AND NOT isFloatSingleEqual(Out2, Out2_ref, 9.9999999999999995e-08) THEN
        Out2_testFailure <= '1';
        ASSERT FALSE
          REPORT "Error in Out2: Expected " & to_hex(Out2_ref) & (" Actual " & to_hex(Out2))
          SEVERITY ERROR;
      END IF;
    END IF;
  END PROCESS Out2_checker;

  testFailure <= Out1_testFailure OR Out2_testFailure;

  completed_msg: PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF snkDone = '1' THEN
        IF testFailure = '0' THEN
          ASSERT FALSE
            REPORT "**************TEST COMPLETED (PASSED)**************"
            SEVERITY NOTE;
        ELSE
          ASSERT FALSE
            REPORT "**************TEST COMPLETED (FAILED)**************"
            SEVERITY NOTE;
        END IF;
      END IF;
    END IF;
  END PROCESS completed_msg;

END rtl;

